@file:Suppress("DEPRECATION", "UNCHECKED_CAST", "MemberVisibilityCanBePrivate", "unused")

package dev.inkremental.dsl.android

import android.animation.LayoutTransition
import android.animation.ObjectAnimator
import android.app.Activity
import android.app.FragmentBreadCrumbs
import android.app.FragmentManager
import android.app.MediaRouteButton
import android.app.SearchableInfo
import android.content.Intent
import android.content.res.ColorStateList
import android.gesture.Gesture
import android.gesture.GestureOverlayView
import android.graphics.Bitmap
import android.graphics.ColorFilter
import android.graphics.Matrix
import android.graphics.Paint
import android.graphics.SurfaceTexture
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import android.inputmethodservice.Keyboard
import android.inputmethodservice.KeyboardView
import android.media.MediaPlayer
import android.net.Uri
import android.opengl.GLSurfaceView
import android.text.Editable
import android.text.InputFilter
import android.text.Spannable
import android.text.TextUtils
import android.text.TextWatcher
import android.text.method.KeyListener
import android.text.method.MovementMethod
import android.text.method.TransformationMethod
import android.view.ActionMode
import android.view.ContextMenu
import android.view.DragEvent
import android.view.KeyEvent
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.SurfaceView
import android.view.TextureView
import android.view.TouchDelegate
import android.view.View
import android.view.ViewGroup
import android.view.ViewStub
import android.view.animation.Animation
import android.view.animation.Interpolator
import android.view.animation.LayoutAnimationController
import android.view.inputmethod.ExtractedText
import android.webkit.DownloadListener
import android.webkit.WebChromeClient
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.AbsListView
import android.widget.AbsSeekBar
import android.widget.Adapter
import android.widget.AdapterView
import android.widget.AdapterViewAnimator
import android.widget.AdapterViewFlipper
import android.widget.AutoCompleteTextView
import android.widget.CalendarView
import android.widget.CheckedTextView
import android.widget.Chronometer
import android.widget.CompoundButton
import android.widget.CursorAdapter
import android.widget.DatePicker
import android.widget.DialerFilter
import android.widget.EditText
import android.widget.ExpandableListAdapter
import android.widget.ExpandableListView
import android.widget.FrameLayout
import android.widget.Gallery
import android.widget.GridLayout
import android.widget.GridView
import android.widget.HorizontalScrollView
import android.widget.ImageSwitcher
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.ListView
import android.widget.MediaController
import android.widget.MultiAutoCompleteTextView
import android.widget.NumberPicker
import android.widget.ProgressBar
import android.widget.QuickContactBadge
import android.widget.RadioGroup
import android.widget.RatingBar
import android.widget.RelativeLayout
import android.widget.ScrollView
import android.widget.Scroller
import android.widget.SearchView
import android.widget.SeekBar
import android.widget.SlidingDrawer
import android.widget.Spinner
import android.widget.Switch
import android.widget.TabHost
import android.widget.TabWidget
import android.widget.TableLayout
import android.widget.TextClock
import android.widget.TextSwitcher
import android.widget.TextView
import android.widget.TimePicker
import android.widget.ToggleButton
import android.widget.VideoView
import android.widget.ViewAnimator
import android.widget.ViewFlipper
import android.widget.ViewSwitcher
import android.widget.ZoomButton
import android.widget.ZoomControls
import java.util.Locale
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.CharSequence
import kotlin.Float
import kotlin.Function
import kotlin.Int
import kotlin.IntArray
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import trikita.anvil.Anvil

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by
 * {@code gradle SdkSetter}
 * It contains views and their setters for Android SDK (API level 17).
 * Please, don't edit it manually unless for debugging.
 */
object SdkSetter : Anvil.AttributeSetter<Any?> {
  override fun set(
    v: View,
    name: String,
    arg: Any?,
    old: Any?
  ): Boolean = when (name) {
    "activity" -> when {
      v is FragmentBreadCrumbs && arg is Activity -> {
        v.setActivity(arg)
        true
      }
      else -> false
    }
    "maxVisible" -> when {
      v is FragmentBreadCrumbs && arg is Int -> {
        v.setMaxVisible(arg)
        true
      }
      else -> false
    }
    "onBreadCrumbClick" -> when {
      v is FragmentBreadCrumbs -> when {
        arg == null -> {
          v.setOnBreadCrumbClickListener(null as? FragmentBreadCrumbs.OnBreadCrumbClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: FragmentManager.BackStackEntry, arg1: Int) -> Boolean)?
          v.setOnBreadCrumbClickListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "extendedSettingsClickListener" -> when {
      v is MediaRouteButton && arg is View.OnClickListener -> {
        v.setExtendedSettingsClickListener(arg)
        true
      }
      else -> false
    }
    "routeTypes" -> when {
      v is MediaRouteButton && arg is Int -> {
        v.setRouteTypes(arg)
        true
      }
      else -> false
    }
    "eventsInterceptionEnabled" -> when {
      v is GestureOverlayView && arg is Boolean -> {
        v.setEventsInterceptionEnabled(arg)
        true
      }
      else -> false
    }
    "fadeEnabled" -> when {
      v is GestureOverlayView && arg is Boolean -> {
        v.setFadeEnabled(arg)
        true
      }
      else -> false
    }
    "fadeOffset" -> when {
      v is GestureOverlayView && arg is Long -> {
        v.setFadeOffset(arg)
        true
      }
      else -> false
    }
    "gesture" -> when {
      v is GestureOverlayView && arg is Gesture -> {
        v.setGesture(arg)
        true
      }
      else -> false
    }
    "gestureColor" -> when {
      v is GestureOverlayView && arg is Int -> {
        v.setGestureColor(arg)
        true
      }
      else -> false
    }
    "gestureStrokeAngleThreshold" -> when {
      v is GestureOverlayView && arg is Float -> {
        v.setGestureStrokeAngleThreshold(arg)
        true
      }
      else -> false
    }
    "gestureStrokeLengthThreshold" -> when {
      v is GestureOverlayView && arg is Float -> {
        v.setGestureStrokeLengthThreshold(arg)
        true
      }
      else -> false
    }
    "gestureStrokeSquarenessTreshold" -> when {
      v is GestureOverlayView && arg is Float -> {
        v.setGestureStrokeSquarenessTreshold(arg)
        true
      }
      else -> false
    }
    "gestureStrokeType" -> when {
      v is GestureOverlayView && arg is Int -> {
        v.setGestureStrokeType(arg)
        true
      }
      else -> false
    }
    "gestureStrokeWidth" -> when {
      v is GestureOverlayView && arg is Float -> {
        v.setGestureStrokeWidth(arg)
        true
      }
      else -> false
    }
    "gestureVisible" -> when {
      v is GestureOverlayView && arg is Boolean -> {
        v.setGestureVisible(arg)
        true
      }
      else -> false
    }
    "orientation" -> when {
      v is GestureOverlayView && arg is Int -> {
        v.setOrientation(arg)
        true
      }
      v is GridLayout && arg is Int -> {
        v.setOrientation(arg)
        true
      }
      v is LinearLayout && arg is Int -> {
        v.setOrientation(arg)
        true
      }
      else -> false
    }
    "uncertainGestureColor" -> when {
      v is GestureOverlayView && arg is Int -> {
        v.setUncertainGestureColor(arg)
        true
      }
      else -> false
    }
    "keyboard" -> when {
      v is KeyboardView && arg is Keyboard -> {
        v.setKeyboard(arg)
        true
      }
      else -> false
    }
    "onKeyboardAction" -> when {
      v is KeyboardView -> when {
        arg == null -> {
          v.setOnKeyboardActionListener(null as? KeyboardView.OnKeyboardActionListener?)
          true
        }
        arg is KeyboardView.OnKeyboardActionListener -> {
          v.setOnKeyboardActionListener(object : KeyboardView.OnKeyboardActionListener {
            override fun onKey(arg0: Int, arg1: IntArray): Unit = arg.onKey(arg0, arg1).also {
                Anvil.render() }

            override fun onPress(arg0: Int): Unit = arg.onPress(arg0).also { Anvil.render() }

            override fun onRelease(arg0: Int): Unit = arg.onRelease(arg0).also { Anvil.render() }

            override fun onText(arg0: CharSequence): Unit = arg.onText(arg0).also { Anvil.render() }

            override fun swipeDown(): Unit = arg.swipeDown().also { Anvil.render() }

            override fun swipeLeft(): Unit = arg.swipeLeft().also { Anvil.render() }

            override fun swipeRight(): Unit = arg.swipeRight().also { Anvil.render() }

            override fun swipeUp(): Unit = arg.swipeUp().also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "popupParent" -> when {
      v is KeyboardView && arg is View -> {
        v.setPopupParent(arg)
        true
      }
      else -> false
    }
    "previewEnabled" -> when {
      v is KeyboardView && arg is Boolean -> {
        v.setPreviewEnabled(arg)
        true
      }
      else -> false
    }
    "proximityCorrectionEnabled" -> when {
      v is KeyboardView && arg is Boolean -> {
        v.setProximityCorrectionEnabled(arg)
        true
      }
      else -> false
    }
    "shifted" -> when {
      v is KeyboardView && arg is Boolean -> {
        v.setShifted(arg)
        true
      }
      else -> false
    }
    "verticalCorrection" -> when {
      v is KeyboardView && arg is Int -> {
        v.setVerticalCorrection(arg)
        true
      }
      else -> false
    }
    "debugFlags" -> when {
      v is GLSurfaceView && arg is Int -> {
        v.setDebugFlags(arg)
        true
      }
      else -> false
    }
    "eGLConfigChooser" -> when {
      v is GLSurfaceView && arg is GLSurfaceView.EGLConfigChooser -> {
        v.setEGLConfigChooser(arg)
        true
      }
      v is GLSurfaceView && arg is Boolean -> {
        v.setEGLConfigChooser(arg)
        true
      }
      else -> false
    }
    "eGLContextClientVersion" -> when {
      v is GLSurfaceView && arg is Int -> {
        v.setEGLContextClientVersion(arg)
        true
      }
      else -> false
    }
    "eGLContextFactory" -> when {
      v is GLSurfaceView && arg is GLSurfaceView.EGLContextFactory -> {
        v.setEGLContextFactory(arg)
        true
      }
      else -> false
    }
    "eGLWindowSurfaceFactory" -> when {
      v is GLSurfaceView && arg is GLSurfaceView.EGLWindowSurfaceFactory -> {
        v.setEGLWindowSurfaceFactory(arg)
        true
      }
      else -> false
    }
    "gLWrapper" -> when {
      v is GLSurfaceView && arg is GLSurfaceView.GLWrapper -> {
        v.setGLWrapper(arg)
        true
      }
      else -> false
    }
    "preserveEGLContextOnPause" -> when {
      v is GLSurfaceView && arg is Boolean -> {
        v.setPreserveEGLContextOnPause(arg)
        true
      }
      else -> false
    }
    "renderMode" -> when {
      v is GLSurfaceView && arg is Int -> {
        v.setRenderMode(arg)
        true
      }
      else -> false
    }
    "renderer" -> when {
      v is GLSurfaceView && arg is GLSurfaceView.Renderer -> {
        v.setRenderer(arg)
        true
      }
      else -> false
    }
    "secure" -> when {
      v is SurfaceView && arg is Boolean -> {
        v.setSecure(arg)
        true
      }
      else -> false
    }
    "zOrderMediaOverlay" -> when {
      v is SurfaceView && arg is Boolean -> {
        v.setZOrderMediaOverlay(arg)
        true
      }
      else -> false
    }
    "zOrderOnTop" -> when {
      v is SurfaceView && arg is Boolean -> {
        v.setZOrderOnTop(arg)
        true
      }
      else -> false
    }
    "opaque" -> when {
      v is TextureView && arg is Boolean -> {
        v.setOpaque(arg)
        true
      }
      else -> false
    }
    "surfaceTexture" -> when {
      v is TextureView && arg is SurfaceTexture -> {
        v.setSurfaceTexture(arg)
        true
      }
      else -> false
    }
    "surfaceTextureListener" -> when {
      v is TextureView && arg is TextureView.SurfaceTextureListener -> {
        v.setSurfaceTextureListener(arg)
        true
      }
      else -> false
    }
    "transform" -> when {
      v is TextureView && arg is Matrix -> {
        v.setTransform(arg)
        true
      }
      else -> false
    }
    "accessibilityDelegate" -> when {
      arg is View.AccessibilityDelegate? -> {
        v.setAccessibilityDelegate(arg as View.AccessibilityDelegate)
        true
      }
      else -> false
    }
    "activated" -> when {
      arg is Boolean -> {
        v.setActivated(arg)
        true
      }
      else -> false
    }
    "alpha" -> when {
      arg is Float -> {
        v.setAlpha(arg)
        true
      }
      else -> false
    }
    "animation" -> when {
      arg is Animation -> {
        v.setAnimation(arg)
        true
      }
      else -> false
    }
    "background" -> when {
      arg is Drawable -> {
        v.setBackground(arg)
        true
      }
      else -> false
    }
    "backgroundColor" -> when {
      arg is Int -> {
        v.setBackgroundColor(arg)
        true
      }
      else -> false
    }
    "backgroundResource" -> when {
      arg is Int -> {
        v.setBackgroundResource(arg)
        true
      }
      else -> false
    }
    "bottom" -> when {
      arg is Int -> {
        v.setBottom(arg)
        true
      }
      else -> false
    }
    "cameraDistance" -> when {
      arg is Float -> {
        v.setCameraDistance(arg)
        true
      }
      else -> false
    }
    "clickable" -> when {
      arg is Boolean -> {
        v.setClickable(arg)
        true
      }
      else -> false
    }
    "contentDescription" -> when {
      arg is CharSequence -> {
        v.setContentDescription(arg)
        true
      }
      else -> false
    }
    "drawingCacheBackgroundColor" -> when {
      arg is Int -> {
        v.setDrawingCacheBackgroundColor(arg)
        true
      }
      else -> false
    }
    "drawingCacheEnabled" -> when {
      arg is Boolean -> {
        v.setDrawingCacheEnabled(arg)
        true
      }
      else -> false
    }
    "drawingCacheQuality" -> when {
      arg is Int -> {
        v.setDrawingCacheQuality(arg)
        true
      }
      else -> false
    }
    "duplicateParentStateEnabled" -> when {
      arg is Boolean -> {
        v.setDuplicateParentStateEnabled(arg)
        true
      }
      else -> false
    }
    "enabled" -> when {
      arg is Boolean -> {
        v.setEnabled(arg)
        true
      }
      else -> false
    }
    "fadingEdgeLength" -> when {
      arg is Int -> {
        v.setFadingEdgeLength(arg)
        true
      }
      else -> false
    }
    "filterTouchesWhenObscured" -> when {
      arg is Boolean -> {
        v.setFilterTouchesWhenObscured(arg)
        true
      }
      else -> false
    }
    "fitsSystemWindows" -> when {
      arg is Boolean -> {
        v.setFitsSystemWindows(arg)
        true
      }
      else -> false
    }
    "focusable" -> when {
      arg is Boolean -> {
        v.setFocusable(arg)
        true
      }
      else -> false
    }
    "focusableInTouchMode" -> when {
      arg is Boolean -> {
        v.setFocusableInTouchMode(arg)
        true
      }
      else -> false
    }
    "hapticFeedbackEnabled" -> when {
      arg is Boolean -> {
        v.setHapticFeedbackEnabled(arg)
        true
      }
      else -> false
    }
    "hasTransientState" -> when {
      arg is Boolean -> {
        v.setHasTransientState(arg)
        true
      }
      else -> false
    }
    "horizontalFadingEdgeEnabled" -> when {
      arg is Boolean -> {
        v.setHorizontalFadingEdgeEnabled(arg)
        true
      }
      else -> false
    }
    "horizontalScrollBarEnabled" -> when {
      arg is Boolean -> {
        v.setHorizontalScrollBarEnabled(arg)
        true
      }
      else -> false
    }
    "hovered" -> when {
      arg is Boolean -> {
        v.setHovered(arg)
        true
      }
      else -> false
    }
    "id" -> when {
      arg is Int -> {
        v.setId(arg)
        true
      }
      else -> false
    }
    "importantForAccessibility" -> when {
      arg is Int -> {
        v.setImportantForAccessibility(arg)
        true
      }
      else -> false
    }
    "keepScreenOn" -> when {
      arg is Boolean -> {
        v.setKeepScreenOn(arg)
        true
      }
      else -> false
    }
    "labelFor" -> when {
      arg is Int -> {
        v.setLabelFor(arg)
        true
      }
      else -> false
    }
    "layerPaint" -> when {
      arg is Paint? -> {
        v.setLayerPaint(arg as Paint)
        true
      }
      else -> false
    }
    "layoutDirection" -> when {
      arg is Int -> {
        v.setLayoutDirection(arg)
        true
      }
      else -> false
    }
    "layoutParams" -> when {
      arg is ViewGroup.LayoutParams -> {
        v.setLayoutParams(arg)
        true
      }
      else -> false
    }
    "left" -> when {
      arg is Int -> {
        v.setLeft(arg)
        true
      }
      else -> false
    }
    "longClickable" -> when {
      arg is Boolean -> {
        v.setLongClickable(arg)
        true
      }
      else -> false
    }
    "minimumHeight" -> when {
      arg is Int -> {
        v.setMinimumHeight(arg)
        true
      }
      else -> false
    }
    "minimumWidth" -> when {
      arg is Int -> {
        v.setMinimumWidth(arg)
        true
      }
      else -> false
    }
    "nextFocusDownId" -> when {
      arg is Int -> {
        v.setNextFocusDownId(arg)
        true
      }
      else -> false
    }
    "nextFocusForwardId" -> when {
      arg is Int -> {
        v.setNextFocusForwardId(arg)
        true
      }
      else -> false
    }
    "nextFocusLeftId" -> when {
      arg is Int -> {
        v.setNextFocusLeftId(arg)
        true
      }
      else -> false
    }
    "nextFocusRightId" -> when {
      arg is Int -> {
        v.setNextFocusRightId(arg)
        true
      }
      else -> false
    }
    "nextFocusUpId" -> when {
      arg is Int -> {
        v.setNextFocusUpId(arg)
        true
      }
      else -> false
    }
    "onClick" -> when {
      arg == null -> {
        v.setOnClickListener(null as? View.OnClickListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View) -> Unit)?
        v.setOnClickListener { arg0 ->
          arg(arg0).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onCreateContextMenu" -> when {
      arg == null -> {
        v.setOnCreateContextMenuListener(null as? View.OnCreateContextMenuListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((
          arg0: ContextMenu,
          arg1: View,
          arg2: ContextMenu.ContextMenuInfo
        ) -> Unit)?
        v.setOnCreateContextMenuListener { arg0, arg1, arg2 ->
          arg(arg0, arg1, arg2).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onDrag" -> when {
      arg == null -> {
        v.setOnDragListener(null as? View.OnDragListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View, arg1: DragEvent) -> Boolean)?
        v.setOnDragListener { arg0, arg1 ->
          arg(arg0, arg1).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onFocusChange" -> when {
      arg == null -> {
        v.setOnFocusChangeListener(null as? View.OnFocusChangeListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View, arg1: Boolean) -> Unit)?
        v.setOnFocusChangeListener { arg0, arg1 ->
          arg(arg0, arg1).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onGenericMotion" -> when {
      arg == null -> {
        v.setOnGenericMotionListener(null as? View.OnGenericMotionListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View, arg1: MotionEvent) -> Boolean)?
        v.setOnGenericMotionListener { arg0, arg1 ->
          arg(arg0, arg1).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onHover" -> when {
      arg == null -> {
        v.setOnHoverListener(null as? View.OnHoverListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View, arg1: MotionEvent) -> Boolean)?
        v.setOnHoverListener { arg0, arg1 ->
          arg(arg0, arg1).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onKey" -> when {
      arg == null -> {
        v.setOnKeyListener(null as? View.OnKeyListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((
          arg0: View,
          arg1: Int,
          arg2: KeyEvent
        ) -> Boolean)?
        v.setOnKeyListener { arg0, arg1, arg2 ->
          arg(arg0, arg1, arg2).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onLongClick" -> when {
      arg == null -> {
        v.setOnLongClickListener(null as? View.OnLongClickListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View) -> Boolean)?
        v.setOnLongClickListener { arg0 ->
          arg(arg0).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onSystemUiVisibilityChange" -> when {
      arg == null -> {
        v.setOnSystemUiVisibilityChangeListener(null as? View.OnSystemUiVisibilityChangeListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: Int) -> Unit)?
        v.setOnSystemUiVisibilityChangeListener { arg0 ->
          arg(arg0).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "onTouch" -> when {
      arg == null -> {
        v.setOnTouchListener(null as? View.OnTouchListener?)
        true
      }
      arg is Function<*> -> {
        arg as ((arg0: View, arg1: MotionEvent) -> Boolean)?
        v.setOnTouchListener { arg0, arg1 ->
          arg(arg0, arg1).also { Anvil.render() }
        }
        true
      }
      else -> false
    }
    "overScrollMode" -> when {
      arg is Int -> {
        v.setOverScrollMode(arg)
        true
      }
      else -> false
    }
    "pivotX" -> when {
      arg is Float -> {
        v.setPivotX(arg)
        true
      }
      else -> false
    }
    "pivotY" -> when {
      arg is Float -> {
        v.setPivotY(arg)
        true
      }
      else -> false
    }
    "pressed" -> when {
      arg is Boolean -> {
        v.setPressed(arg)
        true
      }
      else -> false
    }
    "right" -> when {
      arg is Int -> {
        v.setRight(arg)
        true
      }
      else -> false
    }
    "rotation" -> when {
      arg is Float -> {
        v.setRotation(arg)
        true
      }
      else -> false
    }
    "rotationX" -> when {
      arg is Float -> {
        v.setRotationX(arg)
        true
      }
      else -> false
    }
    "rotationY" -> when {
      arg is Float -> {
        v.setRotationY(arg)
        true
      }
      else -> false
    }
    "saveEnabled" -> when {
      arg is Boolean -> {
        v.setSaveEnabled(arg)
        true
      }
      else -> false
    }
    "saveFromParentEnabled" -> when {
      arg is Boolean -> {
        v.setSaveFromParentEnabled(arg)
        true
      }
      else -> false
    }
    "scaleX" -> when {
      arg is Float -> {
        v.setScaleX(arg)
        true
      }
      else -> false
    }
    "scaleY" -> when {
      arg is Float -> {
        v.setScaleY(arg)
        true
      }
      else -> false
    }
    "scrollBarDefaultDelayBeforeFade" -> when {
      arg is Int -> {
        v.setScrollBarDefaultDelayBeforeFade(arg)
        true
      }
      else -> false
    }
    "scrollBarFadeDuration" -> when {
      arg is Int -> {
        v.setScrollBarFadeDuration(arg)
        true
      }
      else -> false
    }
    "scrollBarSize" -> when {
      arg is Int -> {
        v.setScrollBarSize(arg)
        true
      }
      else -> false
    }
    "scrollBarStyle" -> when {
      arg is Int -> {
        v.setScrollBarStyle(arg)
        true
      }
      else -> false
    }
    "scrollContainer" -> when {
      arg is Boolean -> {
        v.setScrollContainer(arg)
        true
      }
      else -> false
    }
    "scrollX" -> when {
      arg is Int -> {
        v.setScrollX(arg)
        true
      }
      else -> false
    }
    "scrollY" -> when {
      arg is Int -> {
        v.setScrollY(arg)
        true
      }
      else -> false
    }
    "scrollbarFadingEnabled" -> when {
      arg is Boolean -> {
        v.setScrollbarFadingEnabled(arg)
        true
      }
      else -> false
    }
    "selected" -> when {
      arg is Boolean -> {
        v.setSelected(arg)
        true
      }
      else -> false
    }
    "soundEffectsEnabled" -> when {
      arg is Boolean -> {
        v.setSoundEffectsEnabled(arg)
        true
      }
      else -> false
    }
    "systemUiVisibility" -> when {
      arg is Int -> {
        v.setSystemUiVisibility(arg)
        true
      }
      else -> false
    }
    "tag" -> when {
      arg is Any -> {
        v.setTag(arg)
        true
      }
      else -> false
    }
    "textAlignment" -> when {
      arg is Int -> {
        v.setTextAlignment(arg)
        true
      }
      else -> false
    }
    "textDirection" -> when {
      arg is Int -> {
        v.setTextDirection(arg)
        true
      }
      else -> false
    }
    "top" -> when {
      arg is Int -> {
        v.setTop(arg)
        true
      }
      else -> false
    }
    "touchDelegate" -> when {
      arg is TouchDelegate -> {
        v.setTouchDelegate(arg)
        true
      }
      else -> false
    }
    "translationX" -> when {
      arg is Float -> {
        v.setTranslationX(arg)
        true
      }
      else -> false
    }
    "translationY" -> when {
      arg is Float -> {
        v.setTranslationY(arg)
        true
      }
      else -> false
    }
    "verticalFadingEdgeEnabled" -> when {
      arg is Boolean -> {
        v.setVerticalFadingEdgeEnabled(arg)
        true
      }
      else -> false
    }
    "verticalScrollBarEnabled" -> when {
      arg is Boolean -> {
        v.setVerticalScrollBarEnabled(arg)
        true
      }
      else -> false
    }
    "verticalScrollbarPosition" -> when {
      arg is Int -> {
        v.setVerticalScrollbarPosition(arg)
        true
      }
      else -> false
    }
    "visibility" -> when {
      arg is Int -> {
        v.setVisibility(arg)
        true
      }
      else -> false
    }
    "willNotCacheDrawing" -> when {
      arg is Boolean -> {
        v.setWillNotCacheDrawing(arg)
        true
      }
      else -> false
    }
    "willNotDraw" -> when {
      arg is Boolean -> {
        v.setWillNotDraw(arg)
        true
      }
      else -> false
    }
    "x" -> when {
      arg is Float -> {
        v.setX(arg)
        true
      }
      else -> false
    }
    "y" -> when {
      arg is Float -> {
        v.setY(arg)
        true
      }
      else -> false
    }
    "addStatesFromChildren" -> when {
      v is ViewGroup && arg is Boolean -> {
        v.setAddStatesFromChildren(arg)
        true
      }
      else -> false
    }
    "alwaysDrawnWithCacheEnabled" -> when {
      v is ViewGroup && arg is Boolean -> {
        v.setAlwaysDrawnWithCacheEnabled(arg)
        true
      }
      else -> false
    }
    "animationCacheEnabled" -> when {
      v is ViewGroup && arg is Boolean -> {
        v.setAnimationCacheEnabled(arg)
        true
      }
      else -> false
    }
    "clipChildren" -> when {
      v is ViewGroup && arg is Boolean -> {
        v.setClipChildren(arg)
        true
      }
      else -> false
    }
    "clipToPadding" -> when {
      v is ViewGroup && arg is Boolean -> {
        v.setClipToPadding(arg)
        true
      }
      else -> false
    }
    "descendantFocusability" -> when {
      v is ViewGroup && arg is Int -> {
        v.setDescendantFocusability(arg)
        true
      }
      else -> false
    }
    "layoutAnimation" -> when {
      v is ViewGroup && arg is LayoutAnimationController -> {
        v.setLayoutAnimation(arg)
        true
      }
      else -> false
    }
    "layoutAnimationListener" -> when {
      v is ViewGroup && arg is Animation.AnimationListener -> {
        v.setLayoutAnimationListener(arg)
        true
      }
      else -> false
    }
    "layoutTransition" -> when {
      v is ViewGroup && arg is LayoutTransition -> {
        v.setLayoutTransition(arg)
        true
      }
      else -> false
    }
    "motionEventSplittingEnabled" -> when {
      v is ViewGroup && arg is Boolean -> {
        v.setMotionEventSplittingEnabled(arg)
        true
      }
      else -> false
    }
    "onHierarchyChange" -> when {
      v is ViewGroup -> when {
        arg == null -> {
          v.setOnHierarchyChangeListener(null as? ViewGroup.OnHierarchyChangeListener?)
          true
        }
        arg is ViewGroup.OnHierarchyChangeListener -> {
          v.setOnHierarchyChangeListener(object : ViewGroup.OnHierarchyChangeListener {
            override fun onChildViewAdded(arg0: View, arg1: View): Unit = arg.onChildViewAdded(arg0,
                arg1).also { Anvil.render() }

            override fun onChildViewRemoved(arg0: View, arg1: View): Unit =
                arg.onChildViewRemoved(arg0, arg1).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "persistentDrawingCache" -> when {
      v is ViewGroup && arg is Int -> {
        v.setPersistentDrawingCache(arg)
        true
      }
      else -> false
    }
    "inflatedId" -> when {
      v is ViewStub && arg is Int -> {
        v.setInflatedId(arg)
        true
      }
      else -> false
    }
    "layoutInflater" -> when {
      v is ViewStub && arg is LayoutInflater -> {
        v.setLayoutInflater(arg)
        true
      }
      else -> false
    }
    "layoutResource" -> when {
      v is ViewStub && arg is Int -> {
        v.setLayoutResource(arg)
        true
      }
      else -> false
    }
    "onInflate" -> when {
      v is ViewStub -> when {
        arg == null -> {
          v.setOnInflateListener(null as? ViewStub.OnInflateListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: ViewStub, arg1: View) -> Unit)?
          v.setOnInflateListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "downloadListener" -> when {
      v is WebView && arg is DownloadListener -> {
        v.setDownloadListener(arg)
        true
      }
      else -> false
    }
    "findListener" -> when {
      v is WebView && arg is WebView.FindListener -> {
        v.setFindListener(arg)
        true
      }
      else -> false
    }
    "horizontalScrollbarOverlay" -> when {
      v is WebView && arg is Boolean -> {
        v.setHorizontalScrollbarOverlay(arg)
        true
      }
      else -> false
    }
    "initialScale" -> when {
      v is WebView && arg is Int -> {
        v.setInitialScale(arg)
        true
      }
      else -> false
    }
    "networkAvailable" -> when {
      v is WebView && arg is Boolean -> {
        v.setNetworkAvailable(arg)
        true
      }
      else -> false
    }
    "verticalScrollbarOverlay" -> when {
      v is WebView && arg is Boolean -> {
        v.setVerticalScrollbarOverlay(arg)
        true
      }
      else -> false
    }
    "webChromeClient" -> when {
      v is WebView && arg is WebChromeClient -> {
        v.setWebChromeClient(arg)
        true
      }
      else -> false
    }
    "webViewClient" -> when {
      v is WebView && arg is WebViewClient -> {
        v.setWebViewClient(arg)
        true
      }
      else -> false
    }
    "cacheColorHint" -> when {
      v is AbsListView && arg is Int -> {
        v.setCacheColorHint(arg)
        true
      }
      else -> false
    }
    "choiceMode" -> when {
      v is AbsListView && arg is Int -> {
        v.setChoiceMode(arg)
        true
      }
      else -> false
    }
    "drawSelectorOnTop" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setDrawSelectorOnTop(arg)
        true
      }
      else -> false
    }
    "fastScrollAlwaysVisible" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setFastScrollAlwaysVisible(arg)
        true
      }
      else -> false
    }
    "fastScrollEnabled" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setFastScrollEnabled(arg)
        true
      }
      else -> false
    }
    "filterText" -> when {
      v is AbsListView && arg is String -> {
        v.setFilterText(arg)
        true
      }
      else -> false
    }
    "friction" -> when {
      v is AbsListView && arg is Float -> {
        v.setFriction(arg)
        true
      }
      else -> false
    }
    "multiChoiceModeListener" -> when {
      v is AbsListView && arg is AbsListView.MultiChoiceModeListener -> {
        v.setMultiChoiceModeListener(arg)
        true
      }
      else -> false
    }
    "onScroll" -> when {
      v is AbsListView -> when {
        arg == null -> {
          v.setOnScrollListener(null as? AbsListView.OnScrollListener?)
          true
        }
        arg is AbsListView.OnScrollListener -> {
          v.setOnScrollListener(object : AbsListView.OnScrollListener {
            override fun onScroll(
              arg0: AbsListView,
              arg1: Int,
              arg2: Int,
              arg3: Int
            ): Unit = arg.onScroll(arg0, arg1, arg2, arg3).also { Anvil.render() }

            override fun onScrollStateChanged(arg0: AbsListView, arg1: Int): Unit =
                arg.onScrollStateChanged(arg0, arg1).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      v is NumberPicker -> when {
        arg == null -> {
          v.setOnScrollListener(null as? NumberPicker.OnScrollListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: NumberPicker, arg1: Int) -> Unit)?
          v.setOnScrollListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "recyclerListener" -> when {
      v is AbsListView && arg is AbsListView.RecyclerListener -> {
        v.setRecyclerListener(arg)
        true
      }
      else -> false
    }
    "remoteViewsAdapter" -> when {
      v is AbsListView && arg is Intent -> {
        v.setRemoteViewsAdapter(arg)
        true
      }
      v is AdapterViewAnimator && arg is Intent -> {
        v.setRemoteViewsAdapter(arg)
        true
      }
      else -> false
    }
    "scrollingCacheEnabled" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setScrollingCacheEnabled(arg)
        true
      }
      else -> false
    }
    "selector" -> when {
      v is AbsListView && arg is Drawable -> {
        v.setSelector(arg)
        true
      }
      v is AbsListView && arg is Int -> {
        v.setSelector(arg)
        true
      }
      else -> false
    }
    "smoothScrollbarEnabled" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setSmoothScrollbarEnabled(arg)
        true
      }
      else -> false
    }
    "stackFromBottom" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setStackFromBottom(arg)
        true
      }
      else -> false
    }
    "textFilterEnabled" -> when {
      v is AbsListView && arg is Boolean -> {
        v.setTextFilterEnabled(arg)
        true
      }
      else -> false
    }
    "transcriptMode" -> when {
      v is AbsListView && arg is Int -> {
        v.setTranscriptMode(arg)
        true
      }
      else -> false
    }
    "velocityScale" -> when {
      v is AbsListView && arg is Float -> {
        v.setVelocityScale(arg)
        true
      }
      else -> false
    }
    "keyProgressIncrement" -> when {
      v is AbsSeekBar && arg is Int -> {
        v.setKeyProgressIncrement(arg)
        true
      }
      else -> false
    }
    "thumb" -> when {
      v is AbsSeekBar && arg is Drawable -> {
        v.setThumb(arg)
        true
      }
      else -> false
    }
    "thumbOffset" -> when {
      v is AbsSeekBar && arg is Int -> {
        v.setThumbOffset(arg)
        true
      }
      else -> false
    }
    "adapter" -> when {
      v is AdapterView<*> && arg is Adapter -> {
        (v as android.widget.AdapterView<android.widget.Adapter>).setAdapter(arg)
        true
      }
      v is ExpandableListView && arg is ExpandableListAdapter -> {
        v.setAdapter(arg)
        true
      }
      else -> false
    }
    "emptyView" -> when {
      v is AdapterView<*> && arg is View -> {
        (v as android.widget.AdapterView<android.widget.Adapter>).setEmptyView(arg)
        true
      }
      else -> false
    }
    "onItemClick" -> when {
      v is AdapterView<*> -> when {
        arg == null -> {
          (v as android.widget.AdapterView<android.widget.Adapter>).setOnItemClickListener(null as?
              AdapterView.OnItemClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: AdapterView<*>,
            arg1: View,
            arg2: Int,
            arg3: Long
          ) -> Unit)?
          v.setOnItemClickListener { arg0, arg1, arg2, arg3 ->
            arg(arg0, arg1, arg2, arg3).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      v is AutoCompleteTextView -> when {
        arg == null -> {
          v.setOnItemClickListener(null as? AdapterView.OnItemClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: AdapterView<*>,
            arg1: View,
            arg2: Int,
            arg3: Long
          ) -> Unit)?
          v.setOnItemClickListener { arg0, arg1, arg2, arg3 ->
            arg(arg0, arg1, arg2, arg3).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onItemLongClick" -> when {
      v is AdapterView<*> -> when {
        arg == null -> {
          (v as android.widget.AdapterView<android.widget.Adapter>).setOnItemLongClickListener(null
              as? AdapterView.OnItemLongClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: AdapterView<*>,
            arg1: View,
            arg2: Int,
            arg3: Long
          ) -> Boolean)?
          v.setOnItemLongClickListener { arg0, arg1, arg2, arg3 ->
            arg(arg0, arg1, arg2, arg3).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onItemSelected" -> when {
      v is AdapterView<*> -> when {
        arg == null -> {
          (v as android.widget.AdapterView<android.widget.Adapter>).setOnItemSelectedListener(null
              as? AdapterView.OnItemSelectedListener?)
          true
        }
        arg is AdapterView.OnItemSelectedListener -> {
          v.setOnItemSelectedListener(object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(
              arg0: AdapterView<*>,
              arg1: View,
              arg2: Int,
              arg3: Long
            ): Unit = arg.onItemSelected(arg0, arg1, arg2, arg3).also { Anvil.render() }

            override fun onNothingSelected(arg0: AdapterView<*>): Unit =
                arg.onNothingSelected(arg0).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      v is AutoCompleteTextView -> when {
        arg == null -> {
          v.setOnItemSelectedListener(null as? AdapterView.OnItemSelectedListener?)
          true
        }
        arg is AdapterView.OnItemSelectedListener -> {
          v.setOnItemSelectedListener(object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(
              arg0: AdapterView<*>,
              arg1: View,
              arg2: Int,
              arg3: Long
            ): Unit = arg.onItemSelected(arg0, arg1, arg2, arg3).also { Anvil.render() }

            override fun onNothingSelected(arg0: AdapterView<*>): Unit =
                arg.onNothingSelected(arg0).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "selection" -> when {
      v is AdapterView<*> && arg is Int -> {
        (v as android.widget.AdapterView<android.widget.Adapter>).setSelection(arg)
        true
      }
      v is EditText && arg is Int -> {
        v.setSelection(arg)
        true
      }
      else -> false
    }
    "animateFirstView" -> when {
      v is AdapterViewAnimator && arg is Boolean -> {
        v.setAnimateFirstView(arg)
        true
      }
      v is ViewAnimator && arg is Boolean -> {
        v.setAnimateFirstView(arg)
        true
      }
      else -> false
    }
    "displayedChild" -> when {
      v is AdapterViewAnimator && arg is Int -> {
        v.setDisplayedChild(arg)
        true
      }
      v is ViewAnimator && arg is Int -> {
        v.setDisplayedChild(arg)
        true
      }
      else -> false
    }
    "inAnimation" -> when {
      v is ViewAnimator && arg is Animation -> {
        v.setInAnimation(arg)
        true
      }
      v is AdapterViewAnimator && arg is ObjectAnimator -> {
        v.setInAnimation(arg)
        true
      }
      else -> false
    }
    "outAnimation" -> when {
      v is ViewAnimator && arg is Animation -> {
        v.setOutAnimation(arg)
        true
      }
      v is AdapterViewAnimator && arg is ObjectAnimator -> {
        v.setOutAnimation(arg)
        true
      }
      else -> false
    }
    "autoStart" -> when {
      v is AdapterViewFlipper && arg is Boolean -> {
        v.setAutoStart(arg)
        true
      }
      v is ViewFlipper && arg is Boolean -> {
        v.setAutoStart(arg)
        true
      }
      else -> false
    }
    "flipInterval" -> when {
      v is AdapterViewFlipper && arg is Int -> {
        v.setFlipInterval(arg)
        true
      }
      v is ViewFlipper && arg is Int -> {
        v.setFlipInterval(arg)
        true
      }
      else -> false
    }
    "completionHint" -> when {
      v is AutoCompleteTextView && arg is CharSequence -> {
        v.setCompletionHint(arg)
        true
      }
      else -> false
    }
    "dropDownAnchor" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setDropDownAnchor(arg)
        true
      }
      else -> false
    }
    "dropDownBackgroundDrawable" -> when {
      v is AutoCompleteTextView && arg is Drawable -> {
        v.setDropDownBackgroundDrawable(arg)
        true
      }
      else -> false
    }
    "dropDownBackgroundResource" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setDropDownBackgroundResource(arg)
        true
      }
      else -> false
    }
    "dropDownHeight" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setDropDownHeight(arg)
        true
      }
      else -> false
    }
    "dropDownHorizontalOffset" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setDropDownHorizontalOffset(arg)
        true
      }
      v is Spinner && arg is Int -> {
        v.setDropDownHorizontalOffset(arg)
        true
      }
      else -> false
    }
    "dropDownVerticalOffset" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setDropDownVerticalOffset(arg)
        true
      }
      v is Spinner && arg is Int -> {
        v.setDropDownVerticalOffset(arg)
        true
      }
      else -> false
    }
    "dropDownWidth" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setDropDownWidth(arg)
        true
      }
      v is Spinner && arg is Int -> {
        v.setDropDownWidth(arg)
        true
      }
      else -> false
    }
    "listSelection" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setListSelection(arg)
        true
      }
      else -> false
    }
    "onDismiss" -> when {
      v is AutoCompleteTextView -> when {
        arg == null -> {
          v.setOnDismissListener(null as? AutoCompleteTextView.OnDismissListener?)
          true
        }
        arg is Function<*> -> {
          arg as (() -> Unit)?
          v.setOnDismissListener {  ->
            arg().also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "threshold" -> when {
      v is AutoCompleteTextView && arg is Int -> {
        v.setThreshold(arg)
        true
      }
      else -> false
    }
    "validator" -> when {
      v is AutoCompleteTextView && arg is AutoCompleteTextView.Validator -> {
        v.setValidator(arg)
        true
      }
      else -> false
    }
    "date" -> when {
      v is CalendarView && arg is Long -> {
        v.setDate(arg)
        true
      }
      else -> false
    }
    "dateTextAppearance" -> when {
      v is CalendarView && arg is Int -> {
        v.setDateTextAppearance(arg)
        true
      }
      else -> false
    }
    "firstDayOfWeek" -> when {
      v is CalendarView && arg is Int -> {
        v.setFirstDayOfWeek(arg)
        true
      }
      else -> false
    }
    "focusedMonthDateColor" -> when {
      v is CalendarView && arg is Int -> {
        v.setFocusedMonthDateColor(arg)
        true
      }
      else -> false
    }
    "maxDate" -> when {
      v is CalendarView && arg is Long -> {
        v.setMaxDate(arg)
        true
      }
      v is DatePicker && arg is Long -> {
        v.setMaxDate(arg)
        true
      }
      else -> false
    }
    "minDate" -> when {
      v is CalendarView && arg is Long -> {
        v.setMinDate(arg)
        true
      }
      v is DatePicker && arg is Long -> {
        v.setMinDate(arg)
        true
      }
      else -> false
    }
    "onDateChange" -> when {
      v is CalendarView -> when {
        arg == null -> {
          v.setOnDateChangeListener(null as? CalendarView.OnDateChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: CalendarView,
            arg1: Int,
            arg2: Int,
            arg3: Int
          ) -> Unit)?
          v.setOnDateChangeListener { arg0, arg1, arg2, arg3 ->
            arg(arg0, arg1, arg2, arg3).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "selectedDateVerticalBar" -> when {
      v is CalendarView && arg is Drawable -> {
        v.setSelectedDateVerticalBar(arg)
        true
      }
      v is CalendarView && arg is Int -> {
        v.setSelectedDateVerticalBar(arg)
        true
      }
      else -> false
    }
    "selectedWeekBackgroundColor" -> when {
      v is CalendarView && arg is Int -> {
        v.setSelectedWeekBackgroundColor(arg)
        true
      }
      else -> false
    }
    "showWeekNumber" -> when {
      v is CalendarView && arg is Boolean -> {
        v.setShowWeekNumber(arg)
        true
      }
      else -> false
    }
    "shownWeekCount" -> when {
      v is CalendarView && arg is Int -> {
        v.setShownWeekCount(arg)
        true
      }
      else -> false
    }
    "unfocusedMonthDateColor" -> when {
      v is CalendarView && arg is Int -> {
        v.setUnfocusedMonthDateColor(arg)
        true
      }
      else -> false
    }
    "weekDayTextAppearance" -> when {
      v is CalendarView && arg is Int -> {
        v.setWeekDayTextAppearance(arg)
        true
      }
      else -> false
    }
    "weekNumberColor" -> when {
      v is CalendarView && arg is Int -> {
        v.setWeekNumberColor(arg)
        true
      }
      else -> false
    }
    "weekSeparatorLineColor" -> when {
      v is CalendarView && arg is Int -> {
        v.setWeekSeparatorLineColor(arg)
        true
      }
      else -> false
    }
    "checkMarkDrawable" -> when {
      v is CheckedTextView && arg is Drawable? -> {
        v.setCheckMarkDrawable(arg as Drawable)
        true
      }
      v is CheckedTextView && arg is Int -> {
        v.setCheckMarkDrawable(arg)
        true
      }
      else -> false
    }
    "checked" -> when {
      v is CheckedTextView && arg is Boolean -> {
        v.setChecked(arg)
        true
      }
      v is CompoundButton && arg is Boolean -> {
        v.setChecked(arg)
        true
      }
      else -> false
    }
    "base" -> when {
      v is Chronometer && arg is Long -> {
        v.setBase(arg)
        true
      }
      else -> false
    }
    "format" -> when {
      v is Chronometer && arg is String -> {
        v.setFormat(arg)
        true
      }
      else -> false
    }
    "onChronometerTick" -> when {
      v is Chronometer -> when {
        arg == null -> {
          v.setOnChronometerTickListener(null as? Chronometer.OnChronometerTickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: Chronometer) -> Unit)?
          v.setOnChronometerTickListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "buttonDrawable" -> when {
      v is CompoundButton && arg is Drawable? -> {
        v.setButtonDrawable(arg as Drawable)
        true
      }
      v is CompoundButton && arg is Int -> {
        v.setButtonDrawable(arg)
        true
      }
      else -> false
    }
    "onCheckedChange" -> when {
      v is CompoundButton -> when {
        arg == null -> {
          v.setOnCheckedChangeListener(null as? CompoundButton.OnCheckedChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: CompoundButton, arg1: Boolean) -> Unit)?
          v.setOnCheckedChangeListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      v is RadioGroup -> when {
        arg == null -> {
          v.setOnCheckedChangeListener(null as? RadioGroup.OnCheckedChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: RadioGroup, arg1: Int) -> Unit)?
          v.setOnCheckedChangeListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "calendarViewShown" -> when {
      v is DatePicker && arg is Boolean -> {
        v.setCalendarViewShown(arg)
        true
      }
      else -> false
    }
    "spinnersShown" -> when {
      v is DatePicker && arg is Boolean -> {
        v.setSpinnersShown(arg)
        true
      }
      else -> false
    }
    "digitsWatcher" -> when {
      v is DialerFilter && arg is TextWatcher -> {
        v.setDigitsWatcher(arg)
        true
      }
      else -> false
    }
    "filterWatcher" -> when {
      v is DialerFilter && arg is TextWatcher -> {
        v.setFilterWatcher(arg)
        true
      }
      else -> false
    }
    "lettersWatcher" -> when {
      v is DialerFilter && arg is TextWatcher -> {
        v.setLettersWatcher(arg)
        true
      }
      else -> false
    }
    "mode" -> when {
      v is DialerFilter && arg is Int -> {
        v.setMode(arg)
        true
      }
      v is QuickContactBadge && arg is Int -> {
        v.setMode(arg)
        true
      }
      else -> false
    }
    "childDivider" -> when {
      v is ExpandableListView && arg is Drawable -> {
        v.setChildDivider(arg)
        true
      }
      else -> false
    }
    "childIndicator" -> when {
      v is ExpandableListView && arg is Drawable -> {
        v.setChildIndicator(arg)
        true
      }
      else -> false
    }
    "groupIndicator" -> when {
      v is ExpandableListView && arg is Drawable -> {
        v.setGroupIndicator(arg)
        true
      }
      else -> false
    }
    "onChildClick" -> when {
      v is ExpandableListView -> when {
        arg == null -> {
          v.setOnChildClickListener(null as? ExpandableListView.OnChildClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: ExpandableListView,
            arg1: View,
            arg2: Int,
            arg3: Int,
            arg4: Long
          ) -> Boolean)?
          v.setOnChildClickListener { arg0, arg1, arg2, arg3, arg4 ->
            arg(arg0, arg1, arg2, arg3, arg4).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onGroupClick" -> when {
      v is ExpandableListView -> when {
        arg == null -> {
          v.setOnGroupClickListener(null as? ExpandableListView.OnGroupClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: ExpandableListView,
            arg1: View,
            arg2: Int,
            arg3: Long
          ) -> Boolean)?
          v.setOnGroupClickListener { arg0, arg1, arg2, arg3 ->
            arg(arg0, arg1, arg2, arg3).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onGroupCollapse" -> when {
      v is ExpandableListView -> when {
        arg == null -> {
          v.setOnGroupCollapseListener(null as? ExpandableListView.OnGroupCollapseListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: Int) -> Unit)?
          v.setOnGroupCollapseListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onGroupExpand" -> when {
      v is ExpandableListView -> when {
        arg == null -> {
          v.setOnGroupExpandListener(null as? ExpandableListView.OnGroupExpandListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: Int) -> Unit)?
          v.setOnGroupExpandListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "selectedGroup" -> when {
      v is ExpandableListView && arg is Int -> {
        v.setSelectedGroup(arg)
        true
      }
      else -> false
    }
    "foreground" -> when {
      v is FrameLayout && arg is Drawable -> {
        v.setForeground(arg)
        true
      }
      else -> false
    }
    "foregroundGravity" -> when {
      v is FrameLayout && arg is Int -> {
        v.setForegroundGravity(arg)
        true
      }
      else -> false
    }
    "measureAllChildren" -> when {
      v is FrameLayout && arg is Boolean -> {
        v.setMeasureAllChildren(arg)
        true
      }
      else -> false
    }
    "animationDuration" -> when {
      v is Gallery && arg is Int -> {
        v.setAnimationDuration(arg)
        true
      }
      else -> false
    }
    "callbackDuringFling" -> when {
      v is Gallery && arg is Boolean -> {
        v.setCallbackDuringFling(arg)
        true
      }
      else -> false
    }
    "gravity" -> when {
      v is Gallery && arg is Int -> {
        v.setGravity(arg)
        true
      }
      v is GridView && arg is Int -> {
        v.setGravity(arg)
        true
      }
      v is LinearLayout && arg is Int -> {
        v.setGravity(arg)
        true
      }
      v is RelativeLayout && arg is Int -> {
        v.setGravity(arg)
        true
      }
      v is Spinner && arg is Int -> {
        v.setGravity(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setGravity(arg)
        true
      }
      else -> false
    }
    "spacing" -> when {
      v is Gallery && arg is Int -> {
        v.setSpacing(arg)
        true
      }
      else -> false
    }
    "unselectedAlpha" -> when {
      v is Gallery && arg is Float -> {
        v.setUnselectedAlpha(arg)
        true
      }
      else -> false
    }
    "alignmentMode" -> when {
      v is GridLayout && arg is Int -> {
        v.setAlignmentMode(arg)
        true
      }
      else -> false
    }
    "columnCount" -> when {
      v is GridLayout && arg is Int -> {
        v.setColumnCount(arg)
        true
      }
      else -> false
    }
    "columnOrderPreserved" -> when {
      v is GridLayout && arg is Boolean -> {
        v.setColumnOrderPreserved(arg)
        true
      }
      else -> false
    }
    "rowCount" -> when {
      v is GridLayout && arg is Int -> {
        v.setRowCount(arg)
        true
      }
      else -> false
    }
    "rowOrderPreserved" -> when {
      v is GridLayout && arg is Boolean -> {
        v.setRowOrderPreserved(arg)
        true
      }
      else -> false
    }
    "useDefaultMargins" -> when {
      v is GridLayout && arg is Boolean -> {
        v.setUseDefaultMargins(arg)
        true
      }
      else -> false
    }
    "columnWidth" -> when {
      v is GridView && arg is Int -> {
        v.setColumnWidth(arg)
        true
      }
      else -> false
    }
    "horizontalSpacing" -> when {
      v is GridView && arg is Int -> {
        v.setHorizontalSpacing(arg)
        true
      }
      else -> false
    }
    "numColumns" -> when {
      v is GridView && arg is Int -> {
        v.setNumColumns(arg)
        true
      }
      else -> false
    }
    "stretchMode" -> when {
      v is GridView && arg is Int -> {
        v.setStretchMode(arg)
        true
      }
      else -> false
    }
    "verticalSpacing" -> when {
      v is GridView && arg is Int -> {
        v.setVerticalSpacing(arg)
        true
      }
      else -> false
    }
    "fillViewport" -> when {
      v is HorizontalScrollView && arg is Boolean -> {
        v.setFillViewport(arg)
        true
      }
      v is ScrollView && arg is Boolean -> {
        v.setFillViewport(arg)
        true
      }
      else -> false
    }
    "smoothScrollingEnabled" -> when {
      v is HorizontalScrollView && arg is Boolean -> {
        v.setSmoothScrollingEnabled(arg)
        true
      }
      v is ScrollView && arg is Boolean -> {
        v.setSmoothScrollingEnabled(arg)
        true
      }
      else -> false
    }
    "imageDrawable" -> when {
      v is ImageSwitcher && arg is Drawable -> {
        v.setImageDrawable(arg)
        true
      }
      v is ImageView && arg is Drawable? -> {
        v.setImageDrawable(arg as Drawable)
        true
      }
      else -> false
    }
    "imageResource" -> when {
      v is ImageSwitcher && arg is Int -> {
        v.setImageResource(arg)
        true
      }
      v is ImageView && arg is Int -> {
        v.setImageResource(arg)
        true
      }
      else -> false
    }
    "imageURI" -> when {
      v is ImageSwitcher && arg is Uri -> {
        v.setImageURI(arg)
        true
      }
      v is ImageView && arg is Uri? -> {
        v.setImageURI(arg as Uri)
        true
      }
      else -> false
    }
    "adjustViewBounds" -> when {
      v is ImageView && arg is Boolean -> {
        v.setAdjustViewBounds(arg)
        true
      }
      else -> false
    }
    "baseline" -> when {
      v is ImageView && arg is Int -> {
        v.setBaseline(arg)
        true
      }
      else -> false
    }
    "baselineAlignBottom" -> when {
      v is ImageView && arg is Boolean -> {
        v.setBaselineAlignBottom(arg)
        true
      }
      else -> false
    }
    "colorFilter" -> when {
      v is ImageView && arg is ColorFilter -> {
        v.setColorFilter(arg)
        true
      }
      v is ImageView && arg is Int -> {
        v.setColorFilter(arg)
        true
      }
      else -> false
    }
    "cropToPadding" -> when {
      v is ImageView && arg is Boolean -> {
        v.setCropToPadding(arg)
        true
      }
      else -> false
    }
    "imageAlpha" -> when {
      v is ImageView && arg is Int -> {
        v.setImageAlpha(arg)
        true
      }
      else -> false
    }
    "imageBitmap" -> when {
      v is ImageView && arg is Bitmap -> {
        v.setImageBitmap(arg)
        true
      }
      else -> false
    }
    "imageLevel" -> when {
      v is ImageView && arg is Int -> {
        v.setImageLevel(arg)
        true
      }
      else -> false
    }
    "imageMatrix" -> when {
      v is ImageView && arg is Matrix -> {
        v.setImageMatrix(arg)
        true
      }
      else -> false
    }
    "maxHeight" -> when {
      v is ImageView && arg is Int -> {
        v.setMaxHeight(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setMaxHeight(arg)
        true
      }
      else -> false
    }
    "maxWidth" -> when {
      v is ImageView && arg is Int -> {
        v.setMaxWidth(arg)
        true
      }
      v is SearchView && arg is Int -> {
        v.setMaxWidth(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setMaxWidth(arg)
        true
      }
      else -> false
    }
    "scaleType" -> when {
      v is ImageView && arg is ImageView.ScaleType -> {
        v.setScaleType(arg)
        true
      }
      else -> false
    }
    "baselineAligned" -> when {
      v is LinearLayout && arg is Boolean -> {
        v.setBaselineAligned(arg)
        true
      }
      else -> false
    }
    "baselineAlignedChildIndex" -> when {
      v is LinearLayout && arg is Int -> {
        v.setBaselineAlignedChildIndex(arg)
        true
      }
      else -> false
    }
    "dividerDrawable" -> when {
      v is LinearLayout && arg is Drawable -> {
        v.setDividerDrawable(arg)
        true
      }
      v is TabWidget && arg is Int -> {
        v.setDividerDrawable(arg)
        true
      }
      else -> false
    }
    "dividerPadding" -> when {
      v is LinearLayout && arg is Int -> {
        v.setDividerPadding(arg)
        true
      }
      else -> false
    }
    "horizontalGravity" -> when {
      v is LinearLayout && arg is Int -> {
        v.setHorizontalGravity(arg)
        true
      }
      v is RelativeLayout && arg is Int -> {
        v.setHorizontalGravity(arg)
        true
      }
      else -> false
    }
    "measureWithLargestChildEnabled" -> when {
      v is LinearLayout && arg is Boolean -> {
        v.setMeasureWithLargestChildEnabled(arg)
        true
      }
      else -> false
    }
    "showDividers" -> when {
      v is LinearLayout && arg is Int -> {
        v.setShowDividers(arg)
        true
      }
      else -> false
    }
    "verticalGravity" -> when {
      v is LinearLayout && arg is Int -> {
        v.setVerticalGravity(arg)
        true
      }
      v is RelativeLayout && arg is Int -> {
        v.setVerticalGravity(arg)
        true
      }
      else -> false
    }
    "weightSum" -> when {
      v is LinearLayout && arg is Float -> {
        v.setWeightSum(arg)
        true
      }
      else -> false
    }
    "divider" -> when {
      v is ListView && arg is Drawable? -> {
        v.setDivider(arg as Drawable)
        true
      }
      else -> false
    }
    "dividerHeight" -> when {
      v is ListView && arg is Int -> {
        v.setDividerHeight(arg)
        true
      }
      else -> false
    }
    "footerDividersEnabled" -> when {
      v is ListView && arg is Boolean -> {
        v.setFooterDividersEnabled(arg)
        true
      }
      else -> false
    }
    "headerDividersEnabled" -> when {
      v is ListView && arg is Boolean -> {
        v.setHeaderDividersEnabled(arg)
        true
      }
      else -> false
    }
    "itemsCanFocus" -> when {
      v is ListView && arg is Boolean -> {
        v.setItemsCanFocus(arg)
        true
      }
      else -> false
    }
    "overscrollFooter" -> when {
      v is ListView && arg is Drawable -> {
        v.setOverscrollFooter(arg)
        true
      }
      else -> false
    }
    "overscrollHeader" -> when {
      v is ListView && arg is Drawable -> {
        v.setOverscrollHeader(arg)
        true
      }
      else -> false
    }
    "anchorView" -> when {
      v is MediaController && arg is View -> {
        v.setAnchorView(arg)
        true
      }
      else -> false
    }
    "mediaPlayer" -> when {
      v is MediaController && arg is MediaController.MediaPlayerControl -> {
        v.setMediaPlayer(arg)
        true
      }
      else -> false
    }
    "tokenizer" -> when {
      v is MultiAutoCompleteTextView && arg is MultiAutoCompleteTextView.Tokenizer -> {
        v.setTokenizer(arg)
        true
      }
      else -> false
    }
    "displayedValues" -> when {
      v is NumberPicker && arg is Array<*> -> {
        v.setDisplayedValues(arg as Array<String>)
        true
      }
      else -> false
    }
    "formatter" -> when {
      v is NumberPicker && arg is NumberPicker.Formatter -> {
        v.setFormatter(arg)
        true
      }
      else -> false
    }
    "maxValue" -> when {
      v is NumberPicker && arg is Int -> {
        v.setMaxValue(arg)
        true
      }
      else -> false
    }
    "minValue" -> when {
      v is NumberPicker && arg is Int -> {
        v.setMinValue(arg)
        true
      }
      else -> false
    }
    "onLongPressUpdateInterval" -> when {
      v is NumberPicker && arg is Long -> {
        v.setOnLongPressUpdateInterval(arg)
        true
      }
      else -> false
    }
    "onValueChanged" -> when {
      v is NumberPicker -> when {
        arg == null -> {
          v.setOnValueChangedListener(null as? NumberPicker.OnValueChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: NumberPicker,
            arg1: Int,
            arg2: Int
          ) -> Unit)?
          v.setOnValueChangedListener { arg0, arg1, arg2 ->
            arg(arg0, arg1, arg2).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "value" -> when {
      v is NumberPicker && arg is Int -> {
        v.setValue(arg)
        true
      }
      else -> false
    }
    "wrapSelectorWheel" -> when {
      v is NumberPicker && arg is Boolean -> {
        v.setWrapSelectorWheel(arg)
        true
      }
      else -> false
    }
    "indeterminate" -> when {
      v is ProgressBar && arg is Boolean -> {
        v.setIndeterminate(arg)
        true
      }
      else -> false
    }
    "indeterminateDrawable" -> when {
      v is ProgressBar && arg is Drawable -> {
        v.setIndeterminateDrawable(arg)
        true
      }
      else -> false
    }
    "interpolator" -> when {
      v is ProgressBar && arg is Interpolator -> {
        v.setInterpolator(arg)
        true
      }
      else -> false
    }
    "max" -> when {
      v is ProgressBar && arg is Int -> {
        v.setMax(arg)
        true
      }
      else -> false
    }
    "progress" -> when {
      v is ProgressBar && arg is Int -> {
        v.setProgress(arg)
        true
      }
      else -> false
    }
    "progressDrawable" -> when {
      v is ProgressBar && arg is Drawable -> {
        v.setProgressDrawable(arg)
        true
      }
      else -> false
    }
    "secondaryProgress" -> when {
      v is ProgressBar && arg is Int -> {
        v.setSecondaryProgress(arg)
        true
      }
      else -> false
    }
    "excludeMimes" -> when {
      v is QuickContactBadge && arg is Array<*> -> {
        v.setExcludeMimes(arg as Array<String>)
        true
      }
      else -> false
    }
    "isIndicator" -> when {
      v is RatingBar && arg is Boolean -> {
        v.setIsIndicator(arg)
        true
      }
      else -> false
    }
    "numStars" -> when {
      v is RatingBar && arg is Int -> {
        v.setNumStars(arg)
        true
      }
      else -> false
    }
    "onRatingBarChange" -> when {
      v is RatingBar -> when {
        arg == null -> {
          v.setOnRatingBarChangeListener(null as? RatingBar.OnRatingBarChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: RatingBar,
            arg1: Float,
            arg2: Boolean
          ) -> Unit)?
          v.setOnRatingBarChangeListener { arg0, arg1, arg2 ->
            arg(arg0, arg1, arg2).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "rating" -> when {
      v is RatingBar && arg is Float -> {
        v.setRating(arg)
        true
      }
      else -> false
    }
    "stepSize" -> when {
      v is RatingBar && arg is Float -> {
        v.setStepSize(arg)
        true
      }
      else -> false
    }
    "ignoreGravity" -> when {
      v is RelativeLayout && arg is Int -> {
        v.setIgnoreGravity(arg)
        true
      }
      else -> false
    }
    "iconified" -> when {
      v is SearchView && arg is Boolean -> {
        v.setIconified(arg)
        true
      }
      else -> false
    }
    "iconifiedByDefault" -> when {
      v is SearchView && arg is Boolean -> {
        v.setIconifiedByDefault(arg)
        true
      }
      else -> false
    }
    "imeOptions" -> when {
      v is SearchView && arg is Int -> {
        v.setImeOptions(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setImeOptions(arg)
        true
      }
      else -> false
    }
    "inputType" -> when {
      v is SearchView && arg is Int -> {
        v.setInputType(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setInputType(arg)
        true
      }
      else -> false
    }
    "onClose" -> when {
      v is SearchView -> when {
        arg == null -> {
          v.setOnCloseListener(null as? SearchView.OnCloseListener?)
          true
        }
        arg is Function<*> -> {
          arg as (() -> Boolean)?
          v.setOnCloseListener {  ->
            arg().also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onQueryText" -> when {
      v is SearchView -> when {
        arg == null -> {
          v.setOnQueryTextListener(null as? SearchView.OnQueryTextListener?)
          true
        }
        arg is SearchView.OnQueryTextListener -> {
          v.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextChange(arg0: String): Boolean =
                arg.onQueryTextChange(arg0).also { Anvil.render() }

            override fun onQueryTextSubmit(arg0: String): Boolean =
                arg.onQueryTextSubmit(arg0).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "onQueryTextFocusChange" -> when {
      v is SearchView -> when {
        arg == null -> {
          v.setOnQueryTextFocusChangeListener(null as? View.OnFocusChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: View, arg1: Boolean) -> Unit)?
          v.setOnQueryTextFocusChangeListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onSearchClick" -> when {
      v is SearchView -> when {
        arg == null -> {
          v.setOnSearchClickListener(null as? View.OnClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: View) -> Unit)?
          v.setOnSearchClickListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onSuggestion" -> when {
      v is SearchView -> when {
        arg == null -> {
          v.setOnSuggestionListener(null as? SearchView.OnSuggestionListener?)
          true
        }
        arg is SearchView.OnSuggestionListener -> {
          v.setOnSuggestionListener(object : SearchView.OnSuggestionListener {
            override fun onSuggestionClick(arg0: Int): Boolean = arg.onSuggestionClick(arg0).also {
                Anvil.render() }

            override fun onSuggestionSelect(arg0: Int): Boolean =
                arg.onSuggestionSelect(arg0).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "queryHint" -> when {
      v is SearchView && arg is CharSequence? -> {
        v.setQueryHint(arg as CharSequence)
        true
      }
      else -> false
    }
    "queryRefinementEnabled" -> when {
      v is SearchView && arg is Boolean -> {
        v.setQueryRefinementEnabled(arg)
        true
      }
      else -> false
    }
    "searchableInfo" -> when {
      v is SearchView && arg is SearchableInfo -> {
        v.setSearchableInfo(arg)
        true
      }
      else -> false
    }
    "submitButtonEnabled" -> when {
      v is SearchView && arg is Boolean -> {
        v.setSubmitButtonEnabled(arg)
        true
      }
      else -> false
    }
    "suggestionsAdapter" -> when {
      v is SearchView && arg is CursorAdapter -> {
        v.setSuggestionsAdapter(arg)
        true
      }
      else -> false
    }
    "onSeekBarChange" -> when {
      v is SeekBar -> when {
        arg == null -> {
          v.setOnSeekBarChangeListener(null as? SeekBar.OnSeekBarChangeListener?)
          true
        }
        arg is SeekBar.OnSeekBarChangeListener -> {
          v.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(
              arg0: SeekBar,
              arg1: Int,
              arg2: Boolean
            ): Unit = arg.onProgressChanged(arg0, arg1, arg2).also { Anvil.render() }

            override fun onStartTrackingTouch(arg0: SeekBar): Unit =
                arg.onStartTrackingTouch(arg0).also { Anvil.render() }

            override fun onStopTrackingTouch(arg0: SeekBar): Unit =
                arg.onStopTrackingTouch(arg0).also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "onDrawerClose" -> when {
      v is SlidingDrawer -> when {
        arg == null -> {
          v.setOnDrawerCloseListener(null as? SlidingDrawer.OnDrawerCloseListener?)
          true
        }
        arg is Function<*> -> {
          arg as (() -> Unit)?
          v.setOnDrawerCloseListener {  ->
            arg().also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onDrawerOpen" -> when {
      v is SlidingDrawer -> when {
        arg == null -> {
          v.setOnDrawerOpenListener(null as? SlidingDrawer.OnDrawerOpenListener?)
          true
        }
        arg is Function<*> -> {
          arg as (() -> Unit)?
          v.setOnDrawerOpenListener {  ->
            arg().also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onDrawerScroll" -> when {
      v is SlidingDrawer -> when {
        arg == null -> {
          v.setOnDrawerScrollListener(null as? SlidingDrawer.OnDrawerScrollListener?)
          true
        }
        arg is SlidingDrawer.OnDrawerScrollListener -> {
          v.setOnDrawerScrollListener(object : SlidingDrawer.OnDrawerScrollListener {
            override fun onScrollEnded(): Unit = arg.onScrollEnded().also { Anvil.render() }

            override fun onScrollStarted(): Unit = arg.onScrollStarted().also { Anvil.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "popupBackgroundDrawable" -> when {
      v is Spinner && arg is Drawable -> {
        v.setPopupBackgroundDrawable(arg)
        true
      }
      else -> false
    }
    "popupBackgroundResource" -> when {
      v is Spinner && arg is Int -> {
        v.setPopupBackgroundResource(arg)
        true
      }
      else -> false
    }
    "prompt" -> when {
      v is Spinner && arg is CharSequence -> {
        v.setPrompt(arg)
        true
      }
      else -> false
    }
    "promptId" -> when {
      v is Spinner && arg is Int -> {
        v.setPromptId(arg)
        true
      }
      else -> false
    }
    "switchMinWidth" -> when {
      v is Switch && arg is Int -> {
        v.setSwitchMinWidth(arg)
        true
      }
      else -> false
    }
    "switchPadding" -> when {
      v is Switch && arg is Int -> {
        v.setSwitchPadding(arg)
        true
      }
      else -> false
    }
    "switchTypeface" -> when {
      v is Switch && arg is Typeface -> {
        v.setSwitchTypeface(arg)
        true
      }
      else -> false
    }
    "textOff" -> when {
      v is Switch && arg is CharSequence -> {
        v.setTextOff(arg)
        true
      }
      v is ToggleButton && arg is CharSequence -> {
        v.setTextOff(arg)
        true
      }
      else -> false
    }
    "textOn" -> when {
      v is Switch && arg is CharSequence -> {
        v.setTextOn(arg)
        true
      }
      v is ToggleButton && arg is CharSequence -> {
        v.setTextOn(arg)
        true
      }
      else -> false
    }
    "thumbDrawable" -> when {
      v is Switch && arg is Drawable -> {
        v.setThumbDrawable(arg)
        true
      }
      else -> false
    }
    "thumbResource" -> when {
      v is Switch && arg is Int -> {
        v.setThumbResource(arg)
        true
      }
      else -> false
    }
    "thumbTextPadding" -> when {
      v is Switch && arg is Int -> {
        v.setThumbTextPadding(arg)
        true
      }
      else -> false
    }
    "trackDrawable" -> when {
      v is Switch && arg is Drawable -> {
        v.setTrackDrawable(arg)
        true
      }
      else -> false
    }
    "trackResource" -> when {
      v is Switch && arg is Int -> {
        v.setTrackResource(arg)
        true
      }
      else -> false
    }
    "currentTab" -> when {
      v is TabHost && arg is Int -> {
        v.setCurrentTab(arg)
        true
      }
      v is TabWidget && arg is Int -> {
        v.setCurrentTab(arg)
        true
      }
      else -> false
    }
    "currentTabByTag" -> when {
      v is TabHost && arg is String -> {
        v.setCurrentTabByTag(arg)
        true
      }
      else -> false
    }
    "onTabChanged" -> when {
      v is TabHost -> when {
        arg == null -> {
          v.setOnTabChangedListener(null as? TabHost.OnTabChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: String) -> Unit)?
          v.setOnTabChangedListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "leftStripDrawable" -> when {
      v is TabWidget && arg is Drawable? -> {
        v.setLeftStripDrawable(arg as Drawable)
        true
      }
      v is TabWidget && arg is Int -> {
        v.setLeftStripDrawable(arg)
        true
      }
      else -> false
    }
    "rightStripDrawable" -> when {
      v is TabWidget && arg is Drawable? -> {
        v.setRightStripDrawable(arg as Drawable)
        true
      }
      v is TabWidget && arg is Int -> {
        v.setRightStripDrawable(arg)
        true
      }
      else -> false
    }
    "stripEnabled" -> when {
      v is TabWidget && arg is Boolean -> {
        v.setStripEnabled(arg)
        true
      }
      else -> false
    }
    "shrinkAllColumns" -> when {
      v is TableLayout && arg is Boolean -> {
        v.setShrinkAllColumns(arg)
        true
      }
      else -> false
    }
    "stretchAllColumns" -> when {
      v is TableLayout && arg is Boolean -> {
        v.setStretchAllColumns(arg)
        true
      }
      else -> false
    }
    "format12Hour" -> when {
      v is TextClock && arg is CharSequence -> {
        v.setFormat12Hour(arg)
        true
      }
      else -> false
    }
    "format24Hour" -> when {
      v is TextClock && arg is CharSequence -> {
        v.setFormat24Hour(arg)
        true
      }
      else -> false
    }
    "timeZone" -> when {
      v is TextClock && arg is String -> {
        v.setTimeZone(arg)
        true
      }
      else -> false
    }
    "currentText" -> when {
      v is TextSwitcher && arg is CharSequence -> {
        v.setCurrentText(arg)
        true
      }
      else -> false
    }
    "text" -> when {
      v is TextSwitcher && arg is CharSequence -> {
        v.setText(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setText(arg)
        true
      }
      else -> false
    }
    "allCaps" -> when {
      v is TextView && arg is Boolean -> {
        v.setAllCaps(arg)
        true
      }
      else -> false
    }
    "autoLinkMask" -> when {
      v is TextView && arg is Int -> {
        v.setAutoLinkMask(arg)
        true
      }
      else -> false
    }
    "compoundDrawablePadding" -> when {
      v is TextView && arg is Int -> {
        v.setCompoundDrawablePadding(arg)
        true
      }
      else -> false
    }
    "cursorVisible" -> when {
      v is TextView && arg is Boolean -> {
        v.setCursorVisible(arg)
        true
      }
      else -> false
    }
    "customSelectionActionModeCallback" -> when {
      v is TextView && arg is ActionMode.Callback -> {
        v.setCustomSelectionActionModeCallback(arg)
        true
      }
      else -> false
    }
    "editableFactory" -> when {
      v is TextView && arg is Editable.Factory -> {
        v.setEditableFactory(arg)
        true
      }
      else -> false
    }
    "ellipsize" -> when {
      v is TextView && arg is TextUtils.TruncateAt -> {
        v.setEllipsize(arg)
        true
      }
      else -> false
    }
    "ems" -> when {
      v is TextView && arg is Int -> {
        v.setEms(arg)
        true
      }
      else -> false
    }
    "error" -> when {
      v is TextView && arg is CharSequence -> {
        v.setError(arg)
        true
      }
      else -> false
    }
    "extractedText" -> when {
      v is TextView && arg is ExtractedText -> {
        v.setExtractedText(arg)
        true
      }
      else -> false
    }
    "filters" -> when {
      v is TextView && arg is Array<*> -> {
        v.setFilters(arg as Array<InputFilter>)
        true
      }
      else -> false
    }
    "freezesText" -> when {
      v is TextView && arg is Boolean -> {
        v.setFreezesText(arg)
        true
      }
      else -> false
    }
    "height" -> when {
      v is TextView && arg is Int -> {
        v.setHeight(arg)
        true
      }
      else -> false
    }
    "highlightColor" -> when {
      v is TextView && arg is Int -> {
        v.setHighlightColor(arg)
        true
      }
      else -> false
    }
    "hint" -> when {
      v is TextView && arg is CharSequence -> {
        v.setHint(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setHint(arg)
        true
      }
      else -> false
    }
    "hintTextColor" -> when {
      v is TextView && arg is ColorStateList -> {
        v.setHintTextColor(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setHintTextColor(arg)
        true
      }
      else -> false
    }
    "horizontallyScrolling" -> when {
      v is TextView && arg is Boolean -> {
        v.setHorizontallyScrolling(arg)
        true
      }
      else -> false
    }
    "includeFontPadding" -> when {
      v is TextView && arg is Boolean -> {
        v.setIncludeFontPadding(arg)
        true
      }
      else -> false
    }
    "keyListener" -> when {
      v is TextView && arg is KeyListener -> {
        v.setKeyListener(arg)
        true
      }
      else -> false
    }
    "lines" -> when {
      v is TextView && arg is Int -> {
        v.setLines(arg)
        true
      }
      else -> false
    }
    "linkTextColor" -> when {
      v is TextView && arg is ColorStateList -> {
        v.setLinkTextColor(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setLinkTextColor(arg)
        true
      }
      else -> false
    }
    "linksClickable" -> when {
      v is TextView && arg is Boolean -> {
        v.setLinksClickable(arg)
        true
      }
      else -> false
    }
    "marqueeRepeatLimit" -> when {
      v is TextView && arg is Int -> {
        v.setMarqueeRepeatLimit(arg)
        true
      }
      else -> false
    }
    "maxEms" -> when {
      v is TextView && arg is Int -> {
        v.setMaxEms(arg)
        true
      }
      else -> false
    }
    "maxLines" -> when {
      v is TextView && arg is Int -> {
        v.setMaxLines(arg)
        true
      }
      else -> false
    }
    "minEms" -> when {
      v is TextView && arg is Int -> {
        v.setMinEms(arg)
        true
      }
      else -> false
    }
    "minHeight" -> when {
      v is TextView && arg is Int -> {
        v.setMinHeight(arg)
        true
      }
      else -> false
    }
    "minLines" -> when {
      v is TextView && arg is Int -> {
        v.setMinLines(arg)
        true
      }
      else -> false
    }
    "minWidth" -> when {
      v is TextView && arg is Int -> {
        v.setMinWidth(arg)
        true
      }
      else -> false
    }
    "movementMethod" -> when {
      v is TextView && arg is MovementMethod -> {
        v.setMovementMethod(arg)
        true
      }
      else -> false
    }
    "onEditorAction" -> when {
      v is TextView -> when {
        arg == null -> {
          v.setOnEditorActionListener(null as? TextView.OnEditorActionListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: TextView,
            arg1: Int,
            arg2: KeyEvent
          ) -> Boolean)?
          v.setOnEditorActionListener { arg0, arg1, arg2 ->
            arg(arg0, arg1, arg2).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "paintFlags" -> when {
      v is TextView && arg is Int -> {
        v.setPaintFlags(arg)
        true
      }
      else -> false
    }
    "privateImeOptions" -> when {
      v is TextView && arg is String -> {
        v.setPrivateImeOptions(arg)
        true
      }
      else -> false
    }
    "rawInputType" -> when {
      v is TextView && arg is Int -> {
        v.setRawInputType(arg)
        true
      }
      else -> false
    }
    "scroller" -> when {
      v is TextView && arg is Scroller -> {
        v.setScroller(arg)
        true
      }
      else -> false
    }
    "selectAllOnFocus" -> when {
      v is TextView && arg is Boolean -> {
        v.setSelectAllOnFocus(arg)
        true
      }
      else -> false
    }
    "singleLine" -> when {
      v is TextView && arg is Boolean -> {
        v.setSingleLine(arg)
        true
      }
      else -> false
    }
    "spannableFactory" -> when {
      v is TextView && arg is Spannable.Factory -> {
        v.setSpannableFactory(arg)
        true
      }
      else -> false
    }
    "textColor" -> when {
      v is TextView && arg is ColorStateList -> {
        v.setTextColor(arg)
        true
      }
      v is TextView && arg is Int -> {
        v.setTextColor(arg)
        true
      }
      else -> false
    }
    "textIsSelectable" -> when {
      v is TextView && arg is Boolean -> {
        v.setTextIsSelectable(arg)
        true
      }
      else -> false
    }
    "textKeepState" -> when {
      v is TextView && arg is CharSequence -> {
        v.setTextKeepState(arg)
        true
      }
      else -> false
    }
    "textLocale" -> when {
      v is TextView && arg is Locale -> {
        v.setTextLocale(arg)
        true
      }
      else -> false
    }
    "textScaleX" -> when {
      v is TextView && arg is Float -> {
        v.setTextScaleX(arg)
        true
      }
      else -> false
    }
    "transformationMethod" -> when {
      v is TextView && arg is TransformationMethod -> {
        v.setTransformationMethod(arg)
        true
      }
      else -> false
    }
    "typeface" -> when {
      v is TextView && arg is Typeface? -> {
        v.setTypeface(arg as Typeface)
        true
      }
      else -> false
    }
    "width" -> when {
      v is TextView && arg is Int -> {
        v.setWidth(arg)
        true
      }
      else -> false
    }
    "currentHour" -> when {
      v is TimePicker && arg is Int -> {
        v.setCurrentHour(arg)
        true
      }
      else -> false
    }
    "currentMinute" -> when {
      v is TimePicker && arg is Int -> {
        v.setCurrentMinute(arg)
        true
      }
      else -> false
    }
    "is24HourView" -> when {
      v is TimePicker && arg is Boolean -> {
        v.setIs24HourView(arg)
        true
      }
      else -> false
    }
    "onTimeChanged" -> when {
      v is TimePicker -> when {
        arg == null -> {
          v.setOnTimeChangedListener(null as? TimePicker.OnTimeChangedListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: TimePicker,
            arg1: Int,
            arg2: Int
          ) -> Unit)?
          v.setOnTimeChangedListener { arg0, arg1, arg2 ->
            arg(arg0, arg1, arg2).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "mediaController" -> when {
      v is VideoView && arg is MediaController -> {
        v.setMediaController(arg)
        true
      }
      else -> false
    }
    "onCompletion" -> when {
      v is VideoView -> when {
        arg == null -> {
          v.setOnCompletionListener(null as? MediaPlayer.OnCompletionListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: MediaPlayer) -> Unit)?
          v.setOnCompletionListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onError" -> when {
      v is VideoView -> when {
        arg == null -> {
          v.setOnErrorListener(null as? MediaPlayer.OnErrorListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: MediaPlayer,
            arg1: Int,
            arg2: Int
          ) -> Boolean)?
          v.setOnErrorListener { arg0, arg1, arg2 ->
            arg(arg0, arg1, arg2).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onInfo" -> when {
      v is VideoView -> when {
        arg == null -> {
          v.setOnInfoListener(null as? MediaPlayer.OnInfoListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((
            arg0: MediaPlayer,
            arg1: Int,
            arg2: Int
          ) -> Boolean)?
          v.setOnInfoListener { arg0, arg1, arg2 ->
            arg(arg0, arg1, arg2).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onPrepared" -> when {
      v is VideoView -> when {
        arg == null -> {
          v.setOnPreparedListener(null as? MediaPlayer.OnPreparedListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: MediaPlayer) -> Unit)?
          v.setOnPreparedListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "videoPath" -> when {
      v is VideoView && arg is String -> {
        v.setVideoPath(arg)
        true
      }
      else -> false
    }
    "videoURI" -> when {
      v is VideoView && arg is Uri -> {
        v.setVideoURI(arg)
        true
      }
      else -> false
    }
    "factory" -> when {
      v is ViewSwitcher && arg is ViewSwitcher.ViewFactory -> {
        v.setFactory(arg)
        true
      }
      else -> false
    }
    "zoomSpeed" -> when {
      v is ZoomButton && arg is Long -> {
        v.setZoomSpeed(arg)
        true
      }
      v is ZoomControls && arg is Long -> {
        v.setZoomSpeed(arg)
        true
      }
      else -> false
    }
    "isZoomInEnabled" -> when {
      v is ZoomControls && arg is Boolean -> {
        v.setIsZoomInEnabled(arg)
        true
      }
      else -> false
    }
    "isZoomOutEnabled" -> when {
      v is ZoomControls && arg is Boolean -> {
        v.setIsZoomOutEnabled(arg)
        true
      }
      else -> false
    }
    "onZoomInClick" -> when {
      v is ZoomControls -> when {
        arg == null -> {
          v.setOnZoomInClickListener(null as? View.OnClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: View) -> Unit)?
          v.setOnZoomInClickListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onZoomOutClick" -> when {
      v is ZoomControls -> when {
        arg == null -> {
          v.setOnZoomOutClickListener(null as? View.OnClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: View) -> Unit)?
          v.setOnZoomOutClickListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    else -> false
  }
}
