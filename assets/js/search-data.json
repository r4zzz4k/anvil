{
  
  "0": {
    "title": "Code generation",
    "content": "Code generation . TODO rewrite this describing new meta. Stuff below is outdated. . The project has two Gradle plugins in buildSrc. . dev.inkremental.gen (dev.inkremental.meta.gradle.InkrementalGenPlugin) is the plugin which does heavylifting of DSL generation for views. It configures generator tasks using parameters noted in corresponding extension, and DSLGeneratorTask is a task which manages the process. . | dev.inkremental.module (dev.inkremental.meta.gradle.InkrementalModulePlugin) is the companion plugin which unifies accompanying tasks of setting up publishing and basic configuration of the project. . | . Let’s walk through the process of code generation. . Plugin checks the configuration of anvilgen extension. Depending on mentioned type, it configures generator tasks either for Android SDK or for some Android library. It collects dependencies, sets up classpath and passes everything to the task. . | Generator task builds module model via method called createModel. It processes classpath, searching for Android View classes, then collects all attributes, both setters and listeners, using some heuristics to filter out unprocessable entities. . | dumpModel function outputs filtered model to logs for everyone to inspect it. . | renderModel takes the model and generates the code. It outputs: DSL function per view which defines new node in the tree. | Scope class per view which holds members putting attribute nodes to the view node. | Setter object with it’s huge method, main purpose of which is to take tree attribute node and update actual view. | . | Attributes can be either setters or listeners. This separation is most prominent in setter object, which generates code with corresponding methods, namely buildSetter and buildListener. |",
    "url": "https://inkremental.r4zzz4k.me/under-the-hood/code-generation.html",
    "relUrl": "/under-the-hood/code-generation.html"
  }
  ,"1": {
    "title": "Contributing",
    "content": "Building . You should have Android SDK installed. | Make sure you have Android SDK Platforms 15, 19, 21, 28 installed. | Provide either environment variable called ANDROID_HOME or local.properties with sdk.dir pointing to Android SDK root. | Run ./generateDsl.sh | If you have PATH set up properly, you can run the following commands to ensure Android SDK is ready: . sdkmanager --licenses # Accept everything needed if you agree with terms sdkmanager &quot;platforms;android-15&quot; &quot;platforms;android-19&quot; &quot;platforms;android-21&quot; &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot; &quot;extras;android;m2repository&quot; &quot;platform-tools&quot; &quot;tools&quot; . Adding new libraries . Every Gradle module provides publications for any number of libraries. Let’s walk through this by an example. . Suppose we want to generate bindings for the library called androidx.teapot, versions 1.2.0 and 1.2.4. We declare new Inkremental module as follows: . inkremental { androidLibrary(&quot;androidx-teapot&quot;, listOf(&quot;1.2.0&quot;, &quot;1.2.4&quot;) { ... } } . Let’s say that this snippet belongs to the build script of Gradle subproject called inkremental-teapot. . This creates two Inkremental modules: androidxTeapot-1.2.0 and androidxTeapot-1.2.4. They both have own Android flavors with dimension called dev.inkremental.variant.inkremental-teapot. . For these modules we would have following source sets: . src/main/kotlin | src/androidxTeapot/kotlin | src/androidxTeapot-1/kotlin | src/androidxTeapot-1.2/kotlin | src/androidxTeapot-1.2.4/kotlin | src/androidxTeapot-1.2.5/kotlin | src/gen-androidxTeapot-1.2.4/kotlin | src/gen-androidxTeapot-1.2.5/kotlin | . All but last four are common for these two libraries. This can be helpful if libraries follow semantic versioning and you have some custom code that can be shared for different versions with the same major or minor component. . Last two source sets will contain automatically generated code. . We would similarily have following Gradle configurations: . inkremental | androidxTeapotInkremental | androidxTeapot-1Inkremental | androidxTeapot-1.2Inkremental | androidxTeapot-1.2.4Inkremental | androidxTeapot-1.2.5Inkremental | . These can be used to declare dependencies on other Inkremental modules. . inkrementalGen | androidxTeapotInkrementalGen | androidxTeapot-1InkrementalGen | androidxTeapot-1.2InkrementalGen | androidxTeapot-1.2.4InkrementalGen | androidxTeapot-1.2.5InkrementalGen | . These configurations are used to collect artifacts for code generator processing. . All the custom code like your own attributes and setters that you have can be placed in any of source sets mentioned above. To run this process on our sample library, you would declare something along those lines: . dependencies { &quot;inkremental&quot;(&quot;dev.inkremental.androidx.heater:heater:1.6.1@json&quot;) &quot;androidxHeater-1.6.1InkrementalGen&quot;(&quot;androidx.heater:heater:1.6.1&quot;) } . If you’d like to declare dependency on another Inkremental module within the same project, instead of that you’ll have the following: . android { defaultConfig { missingDimensionStrategy(&quot;dev.inkremental.variant.inkremental-heater&quot;, &quot;androidxHeater-1.6.1&quot;) } } dependencies { implementation(project(&quot;:inkremental-heater&quot;)) &quot;inkremental&quot;(project(&quot;:inkremental-heater&quot;, &quot;androidxHeater-1.6.1InkrementalDef&quot;)) &quot;androidxHeater-1.6.1InkrementalGen&quot;(&quot;androidx.heater:heater:1.6.1&quot;) } . Don’t forget to add your project to the root settings.gradle.kts and mention it in root build.gradle.kts so that common build and publish tasks would catch it. . Publishing . Metadata for publishing is mostly declared at root gradle.properties file. To publish artifacts to repository, you should declare following environment variables: . BINTRAY_USER: username of Bintray account. | BINTRAY_API_KEY: API key for Bintray, can be found in profile settings. | BINTRAY_REPO (optional): overrides repo declared in properties file, can be used to test publishing with different Maven repository. | . Notes . To disable code generation on every build, you can run Gradle with the following parameter: -PdontGenerateCodeOnBuild=true. You can also add dontGenerateCodeOnBuild=true to your local.properties as a permanent solution. Please don’t forget to disable this flag when preparing PR. | .",
    "url": "https://inkremental.r4zzz4k.me/contributing.html",
    "relUrl": "/contributing.html"
  }
  ,"2": {
    "title": "Core principles",
    "content": "Core principles . The main entry point to the library right now is trikita.anvil.Anvil class and it’s siblings in anvil module. It contains a bunch of static properties and methods which work together to provide core functionality. . TODO .",
    "url": "https://inkremental.r4zzz4k.me/under-the-hood/core-principles.html",
    "relUrl": "/under-the-hood/core-principles.html"
  }
  ,"3": {
    "title": "Customization",
    "content": "Customization . There are two ways to influence generated code: quirks and custom code. . In cases where heuristics filtering out unusable classes or attributes don’t help, one can set up quirks. This is a simple dictionary, which maps qualified names of views to nested dictionary. It in turn allows for disabling or renaming generated scope or disable generation of specific attribute. You can check [anvil/build.gradle] for the example of how this could be used. . As mentioned earlier, the main parts of generated code are scopes and setter. Both parts can be influenced in some way. . Customization of scopes can be done via extension functions. This keeps type-safety guaranties while allowing to utilize Kotlin powers. . One can also create custom setter to process attributes added via extensions. You can use anvilgen extension to point machinery to your setter so it would be initialized along with generated one. .",
    "url": "https://inkremental.r4zzz4k.me/under-the-hood/customization.html",
    "relUrl": "/under-the-hood/customization.html"
  }
  ,"4": {
    "title": "Under the hood",
    "content": "Under the hood . TODO .",
    "url": "https://inkremental.r4zzz4k.me/under-the-hood/",
    "relUrl": "/under-the-hood/"
  }
  ,"5": {
    "title": "Home",
    "content": "Declarative native Android UI made easy . Inkremental gives your Android apps a jumpstart with a declarative way to write your user interfaces while still using native UX. . Get started Join us on GitHub . . Getting started . … . About the project . … . License . Inkremental is distributed by an Apache 2.0 license. . Contributing . See corresponding guide .",
    "url": "https://inkremental.r4zzz4k.me/",
    "relUrl": "/"
  }
  
}